//mixines for font-sizes
@mixin font-size($prefix,$step,$range,$unit){
    @for $i from 1 through $range {
        .#{$prefix}#{$i}{
            font-size:#{$i*$step}#{$unit};
        }
    }
}

//mixin for padding generation
@mixin padding($attr,$prefix,$step,$range,$unit){
    @for $i from 1 through $range {
        .#{$prefix}#{$i}{
            #{$attr}:#{$i}#{$unit};
        }
    }
}
// mixin for font-weight generation
@mixin fontweight($attr,$prefix,$step,$range){
  @for $i from 4 through $range {
      .#{$prefix}#{$i*100}{
          #{$attr}:#{$i*100};
      }
  }
}
//mixin for margin generation
@mixin margin($attr,$prefix,$step,$range,$unit){
    @for $i from 1 through $range {
        .#{$prefix}#{$i}{
            #{$attr}:#{$i}#{$unit};
        }
    }
}

//mixin for generate classes with color pallette
@mixin theme-class($map, $selector: '', $property: '',$palate:'') {
    $selector: if($selector == '' and &, &, $selector);

    @each $key, $value in $map {
        @if type-of($value) == map {
            $palate:on-#{$palate};
            $selector: selector-append($selector, #{$palate});
            @include theme-class($value, $selector, $property) {
                @content;
            }
        } @else {
          @at-root #{$selector}#{$palate}-#{$key} {
                #{$property}: $value;
            };
        };
    };
};

//mixin for width generation for every 10%
@mixin width($attr, $prefix, $step, $range, $unit) {
    @for $i from 1 through $range {
      $value: $i * 10; 
      .#{$prefix}#{$value} {
        #{$attr}: #{$value}#{$unit};
      }
    }
}

@mixin align($attr, $prefix, $step, $range, $unit) {
    @for $i from $step through $range {
        .#{$prefix}#{$i}{
            #{$attr}:#{$i}#{$unit};
        }
    }
}